name: CI Pipeline

on:
  push:
    branches: [develop, main, 'feature/*']
  pull_request:
    branches: [develop, main]

jobs:
  # 緊急度判定・フロー振り分け
  emergency-detection:
    runs-on: ubuntu-latest
    name: Emergency Level Detection
    outputs:
      is_emergency: ${{ steps.detect.outputs.is_emergency }}
      emergency_level: ${{ steps.detect.outputs.level }}
    
    steps:
      - name: Detect emergency level
        id: detect
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "🔍 コミットメッセージ分析: $COMMIT_MSG"
          
          if echo "$COMMIT_MSG" | grep -q "🚨.*CRITICAL\|🔴"; then
            echo "is_emergency=true" >> $GITHUB_OUTPUT
            echo "level=CRITICAL" >> $GITHUB_OUTPUT
            echo "🔴 CRITICAL緊急修正検出"
          elif echo "$COMMIT_MSG" | grep -q "🚨.*HIGH\|🟡\|HOTFIX\|EMERGENCY"; then
            echo "is_emergency=true" >> $GITHUB_OUTPUT  
            echo "level=HIGH" >> $GITHUB_OUTPUT
            echo "🟡 HIGH緊急修正検出"
          else
            echo "is_emergency=false" >> $GITHUB_OUTPUT
            echo "level=NORMAL" >> $GITHUB_OUTPUT
            echo "🟢 通常修正"
          fi
  # 緊急時高速チェック
  emergency-fast-check:
    needs: emergency-detection
    if: needs.emergency-detection.outputs.is_emergency == 'true'
    runs-on: ubuntu-latest
    name: Emergency Fast Quality Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: Critical checks only
        run: |
          echo "🚨 緊急修正 (${{ needs.emergency-detection.outputs.emergency_level }}) - 高速品質チェック"
          npm run build
          echo "✅ 緊急修正の最低限品質確認完了"

  # 通常の完全テスト
  test:
    needs: emergency-detection
    if: needs.emergency-detection.outputs.is_emergency == 'false'
    runs-on: ubuntu-latest
    name: Full Quality Assurance

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

      - name: Lint check
        run: npm run lint

      - name: Unit tests
        run: npm run test:unit -- --coverage --watchAll=false

      - name: Integration tests
        run: npm run test:integration -- --watchAll=false
        env:
          MONGODB_URI: mongodb://localhost:27017/board-app-test

      - name: Build application
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: E2E tests
        run: npx playwright test
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: |
            playwright-report/
            test-results/