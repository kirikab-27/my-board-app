name: Blue-Green Deployment
# Issue #62: Blue-Green Deployment with GitHub Actions

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      strategy:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - canary
      auto_switch:
        description: 'Auto switch after health check'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
      target_env: ${{ steps.determine_env.outputs.target }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine target environment
        id: determine_env
        run: |
          if [ "${{ github.event.inputs.strategy }}" = "blue-green" ]; then
            # Check current active environment
            CURRENT_ACTIVE=$(curl -s https://api.vercel.com/v1/projects/my-board-app/env \
              -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
              | jq -r '.envs[] | select(.key=="ACTIVE_ENV") | .value')
            
            if [ "$CURRENT_ACTIVE" = "blue" ]; then
              echo "target=green" >> $GITHUB_OUTPUT
            else
              echo "target=blue" >> $GITHUB_OUTPUT
            fi
          else
            echo "target=canary" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment }}',
              auto_merge: false,
              required_contexts: [],
              description: '${{ github.event.inputs.strategy }} deployment to ${{ github.event.inputs.environment }}'
            });
            core.setOutput('deployment_id', deployment.data.id);

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test -- --passWithNoTests

      - name: Build application
        run: npm run build

  deploy:
    name: Deploy to ${{ needs.prepare.outputs.target_env }}
    runs-on: ubuntu-latest
    needs: [prepare, test]
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deployment_id }},
              state: 'in_progress',
              description: 'Deploying to ${{ needs.prepare.outputs.target_env }}'
            });

      - name: Deploy to Vercel
        id: deploy
        run: |
          # Install Vercel CLI
          npm i -g vercel
          
          # Deploy to target environment
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            DEPLOYMENT_URL=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
          else
            DEPLOYMENT_URL=$(vercel --token=${{ secrets.VERCEL_TOKEN }} --yes)
          fi
          
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

      - name: Set environment variables
        run: |
          # Update active environment variable
          curl -X POST https://api.vercel.com/v1/projects/my-board-app/env \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "key": "DEPLOYMENT_ENV",
              "value": "${{ needs.prepare.outputs.target_env }}",
              "target": ["${{ github.event.inputs.environment }}"]
            }'

  health_check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        id: health
        run: |
          DEPLOYMENT_URL="${{ needs.deploy.outputs.url }}"
          MAX_RETRIES=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/api/health")
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Health check passed"
              echo "status=healthy" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "Health check failed (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 10
          done
          
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          exit 1

      - name: Run smoke tests
        if: steps.health.outputs.status == 'healthy'
        run: |
          # Run basic smoke tests
          npx playwright test tests/smoke --project=chromium

  switch_traffic:
    name: Switch Traffic
    runs-on: ubuntu-latest
    needs: [prepare, deploy, health_check]
    if: github.event.inputs.auto_switch == 'true' && github.event.inputs.strategy == 'blue-green'
    steps:
      - name: Switch traffic to new environment
        run: |
          echo "Switching traffic to ${{ needs.prepare.outputs.target_env }}"
          
          # Update Vercel alias
          vercel alias set ${{ needs.deploy.outputs.url }} \
            ${{ github.event.inputs.environment }}.kab137lab.com \
            --token=${{ secrets.VERCEL_TOKEN }}
          
          # Update active environment marker
          curl -X POST https://api.vercel.com/v1/projects/my-board-app/env \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "key": "ACTIVE_ENV",
              "value": "${{ needs.prepare.outputs.target_env }}",
              "target": ["${{ github.event.inputs.environment }}"]
            }'

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deployment_id }},
              state: 'success',
              description: 'Successfully deployed to ${{ needs.prepare.outputs.target_env }}',
              environment_url: '${{ needs.deploy.outputs.url }}'
            });

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [prepare, deploy, health_check]
    if: failure() && github.event.inputs.strategy == 'blue-green'
    steps:
      - name: Rollback to previous environment
        run: |
          echo "Rolling back deployment"
          
          # Get previous active environment
          PREVIOUS_ENV=$([ "${{ needs.prepare.outputs.target_env }}" = "blue" ] && echo "green" || echo "blue")
          
          # Revert traffic
          echo "Reverting traffic to $PREVIOUS_ENV"
          
          # Update active environment marker
          curl -X POST https://api.vercel.com/v1/projects/my-board-app/env \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "key": "ACTIVE_ENV",
              "value": "'$PREVIOUS_ENV'",
              "target": ["${{ github.event.inputs.environment }}"]
            }'

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deployment_id }},
              state: 'failure',
              description: 'Deployment failed and rolled back'
            });

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 62,
              body: 'ðŸ”„ Deployment rollback executed for ${{ github.event.inputs.environment }} environment'
            });